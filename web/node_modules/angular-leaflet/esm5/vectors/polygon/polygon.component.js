/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import { polygon } from 'leaflet';
import { BaseLayer } from '../../core/base-layer';
var PolygonComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PolygonComponent, _super);
    function PolygonComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PolygonComponent.prototype, "coordinates", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._coordinates = value;
            if (this.layerRef) {
                this.layerRef.setLatLngs(value);
            }
            else {
                this.createLayer();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PolygonComponent.prototype, "options", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = value;
            if (this.layerRef) {
                this.layerRef.setStyle(value);
            }
            else {
                this.createLayer();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PolygonComponent.prototype.createLayer = /**
     * @return {?}
     */
    function () {
        if (this.mapRef && this._coordinates) {
            this.layerRef = polygon(this._coordinates, tslib_1.__assign({}, this._options));
            this.mapRef.addLayer(this.layerRef);
            this.initHandlers();
        }
    };
    /**
     * @param {?} map
     * @return {?}
     */
    PolygonComponent.prototype.addTo = /**
     * @param {?} map
     * @return {?}
     */
    function (map) {
        _super.prototype.addTo.call(this, map);
        if (!this.layerRef) {
            this.createLayer();
        }
    };
    PolygonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngl-polygon',
                    template: '',
                    providers: [{ provide: BaseLayer, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return PolygonComponent; })) }]
                }] }
    ];
    PolygonComponent.propDecorators = {
        coordinates: [{ type: Input }],
        options: [{ type: Input }]
    };
    return PolygonComponent;
}(BaseLayer));
export { PolygonComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PolygonComponent.prototype._coordinates;
    /**
     * @type {?}
     * @private
     */
    PolygonComponent.prototype._options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9seWdvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWxlYWZsZXQvIiwic291cmNlcyI6WyJ2ZWN0b3JzL3BvbHlnb24vcG9seWdvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFrRCxPQUFPLEVBQVcsTUFBTSxTQUFTLENBQUM7QUFDM0YsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRWxEO0lBS3NDLDRDQUFrQjtJQUx4RDs7SUEyQ0EsQ0FBQztJQXJDQyxzQkFBYSx5Q0FBVzs7Ozs7UUFBeEIsVUFBeUIsS0FBeUI7WUFDaEQsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7WUFDMUIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNqQztpQkFBTTtnQkFDTCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDcEI7UUFDSCxDQUFDOzs7T0FBQTtJQUVELHNCQUFhLHFDQUFPOzs7OztRQUFwQixVQUFxQixLQUFrQjtZQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztZQUN0QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQy9CO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUNwQjtRQUNILENBQUM7OztPQUFBOzs7O0lBS0Qsc0NBQVc7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksdUJBQ3BDLElBQUksQ0FBQyxRQUFRLEVBQ2hCLENBQUM7WUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDcEMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxnQ0FBSzs7OztJQUFMLFVBQU0sR0FBcUI7UUFDekIsaUJBQU0sS0FBSyxZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQjtJQUNILENBQUM7O2dCQTFDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLFFBQVEsRUFBRSxFQUFFO29CQUNaLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSxnQkFBZ0IsRUFBaEIsQ0FBZ0IsRUFBQyxFQUFFLENBQUM7aUJBQ3JGOzs7OEJBRUUsS0FBSzswQkFTTCxLQUFLOztJQTRCUix1QkFBQztDQUFBLEFBM0NELENBS3NDLFNBQVMsR0FzQzlDO1NBdENZLGdCQUFnQjs7Ozs7O0lBbUIzQix3Q0FBeUM7Ozs7O0lBQ3pDLG9DQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgZm9yd2FyZFJlZiwgSW5wdXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGF0TG5nRXhwcmVzc2lvbiwgTGF5ZXJHcm91cCwgTWFwLCBQYXRoT3B0aW9ucywgcG9seWdvbiwgUG9seWdvbiB9IGZyb20gJ2xlYWZsZXQnO1xuaW1wb3J0IHsgQmFzZUxheWVyIH0gZnJvbSAnLi4vLi4vY29yZS9iYXNlLWxheWVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmdsLXBvbHlnb24nLFxuICB0ZW1wbGF0ZTogJycsXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogQmFzZUxheWVyLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQb2x5Z29uQ29tcG9uZW50KSB9XVxufSlcbmV4cG9ydCBjbGFzcyBQb2x5Z29uQ29tcG9uZW50IGV4dGVuZHMgQmFzZUxheWVyPFBvbHlnb24+IHtcbiAgQElucHV0KCkgc2V0IGNvb3JkaW5hdGVzKHZhbHVlOiBMYXRMbmdFeHByZXNzaW9uW10pIHtcbiAgICB0aGlzLl9jb29yZGluYXRlcyA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmxheWVyUmVmKSB7XG4gICAgICB0aGlzLmxheWVyUmVmLnNldExhdExuZ3ModmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNyZWF0ZUxheWVyKCk7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KCkgc2V0IG9wdGlvbnModmFsdWU6IFBhdGhPcHRpb25zKSB7XG4gICAgdGhpcy5fb3B0aW9ucyA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmxheWVyUmVmKSB7XG4gICAgICB0aGlzLmxheWVyUmVmLnNldFN0eWxlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jcmVhdGVMYXllcigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2Nvb3JkaW5hdGVzOiBMYXRMbmdFeHByZXNzaW9uW107XG4gIHByaXZhdGUgX29wdGlvbnM6IFBhdGhPcHRpb25zO1xuXG4gIGNyZWF0ZUxheWVyKCkge1xuICAgIGlmICh0aGlzLm1hcFJlZiAmJiB0aGlzLl9jb29yZGluYXRlcykge1xuICAgICAgdGhpcy5sYXllclJlZiA9IHBvbHlnb24odGhpcy5fY29vcmRpbmF0ZXMsIHtcbiAgICAgICAgLi4udGhpcy5fb3B0aW9uc1xuICAgICAgfSk7XG4gICAgICB0aGlzLm1hcFJlZi5hZGRMYXllcih0aGlzLmxheWVyUmVmKTtcbiAgICAgIHRoaXMuaW5pdEhhbmRsZXJzKCk7XG4gICAgfVxuICB9XG5cbiAgYWRkVG8obWFwOiBNYXAgfCBMYXllckdyb3VwKTogdm9pZCB7XG4gICAgc3VwZXIuYWRkVG8obWFwKTtcbiAgICBpZiAoIXRoaXMubGF5ZXJSZWYpIHtcbiAgICAgIHRoaXMuY3JlYXRlTGF5ZXIoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==