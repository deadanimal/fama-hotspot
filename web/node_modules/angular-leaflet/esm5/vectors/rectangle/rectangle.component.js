/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, forwardRef, Input } from '@angular/core';
import { LatLngBounds, rectangle } from 'leaflet';
import { BaseLayer } from '../../core/base-layer';
var RectangleComponent = /** @class */ (function (_super) {
    tslib_1.__extends(RectangleComponent, _super);
    function RectangleComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(RectangleComponent.prototype, "bounds", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._bounds = value;
            if (this.layerRef) {
                this.layerRef.setBounds(value);
            }
            else {
                this.createLayer();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RectangleComponent.prototype, "options", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._options = value;
            if (this.layerRef) {
                this.layerRef.setStyle(value);
            }
            else {
                this.createLayer();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RectangleComponent.prototype.createLayer = /**
     * @return {?}
     */
    function () {
        if (this.mapRef && this._bounds) {
            this.layerRef = rectangle(this._bounds, tslib_1.__assign({}, this._options));
            this.mapRef.addLayer(this.layerRef);
            this.initHandlers();
        }
    };
    /**
     * @param {?} map
     * @return {?}
     */
    RectangleComponent.prototype.addTo = /**
     * @param {?} map
     * @return {?}
     */
    function (map) {
        _super.prototype.addTo.call(this, map);
        if (!this.layerRef) {
            this.createLayer();
        }
    };
    RectangleComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngl-rectangle',
                    template: '',
                    providers: [{ provide: BaseLayer, useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return RectangleComponent; })) }]
                }] }
    ];
    RectangleComponent.propDecorators = {
        bounds: [{ type: Input }],
        options: [{ type: Input }]
    };
    return RectangleComponent;
}(BaseLayer));
export { RectangleComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RectangleComponent.prototype._bounds;
    /**
     * @type {?}
     * @private
     */
    RectangleComponent.prototype._options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdGFuZ2xlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItbGVhZmxldC8iLCJzb3VyY2VzIjpbInZlY3RvcnMvcmVjdGFuZ2xlL3JlY3RhbmdsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLFlBQVksRUFBZ0MsU0FBUyxFQUFhLE1BQU0sU0FBUyxDQUFDO0FBQzNGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVsRDtJQUt3Qyw4Q0FBb0I7SUFMNUQ7O0lBMkNBLENBQUM7SUFyQ0Msc0JBQWEsc0NBQU07Ozs7O1FBQW5CLFVBQW9CLEtBQW1CO1lBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDaEM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ3BCO1FBQ0gsQ0FBQzs7O09BQUE7SUFFRCxzQkFBYSx1Q0FBTzs7Ozs7UUFBcEIsVUFBcUIsS0FBa0I7WUFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDdEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMvQjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDcEI7UUFDSCxDQUFDOzs7T0FBQTs7OztJQUtELHdDQUFXOzs7SUFBWDtRQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLHVCQUNqQyxJQUFJLENBQUMsUUFBUSxFQUNoQixDQUFDO1lBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNyQjtJQUNILENBQUM7Ozs7O0lBRUQsa0NBQUs7Ozs7SUFBTCxVQUFNLEdBQXFCO1FBQ3pCLGlCQUFNLEtBQUssWUFBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDOztnQkExQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsRUFBRTtvQkFDWixTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFVBQVU7Ozs0QkFBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLEVBQUMsRUFBRSxDQUFDO2lCQUN2Rjs7O3lCQUVFLEtBQUs7MEJBU0wsS0FBSzs7SUE0QlIseUJBQUM7Q0FBQSxBQTNDRCxDQUt3QyxTQUFTLEdBc0NoRDtTQXRDWSxrQkFBa0I7Ozs7OztJQW1CN0IscUNBQThCOzs7OztJQUM5QixzQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIGZvcndhcmRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMYXRMbmdCb3VuZHMsIExheWVyR3JvdXAsIE1hcCwgUGF0aE9wdGlvbnMsIHJlY3RhbmdsZSwgUmVjdGFuZ2xlIH0gZnJvbSAnbGVhZmxldCc7XG5pbXBvcnQgeyBCYXNlTGF5ZXIgfSBmcm9tICcuLi8uLi9jb3JlL2Jhc2UtbGF5ZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ2wtcmVjdGFuZ2xlJyxcbiAgdGVtcGxhdGU6ICcnLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IEJhc2VMYXllciwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUmVjdGFuZ2xlQ29tcG9uZW50KSB9XVxufSlcbmV4cG9ydCBjbGFzcyBSZWN0YW5nbGVDb21wb25lbnQgZXh0ZW5kcyBCYXNlTGF5ZXI8UmVjdGFuZ2xlPiB7XG4gIEBJbnB1dCgpIHNldCBib3VuZHModmFsdWU6IExhdExuZ0JvdW5kcykge1xuICAgIHRoaXMuX2JvdW5kcyA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmxheWVyUmVmKSB7XG4gICAgICB0aGlzLmxheWVyUmVmLnNldEJvdW5kcyh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3JlYXRlTGF5ZXIoKTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKSBzZXQgb3B0aW9ucyh2YWx1ZTogUGF0aE9wdGlvbnMpIHtcbiAgICB0aGlzLl9vcHRpb25zID0gdmFsdWU7XG4gICAgaWYgKHRoaXMubGF5ZXJSZWYpIHtcbiAgICAgIHRoaXMubGF5ZXJSZWYuc2V0U3R5bGUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNyZWF0ZUxheWVyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfYm91bmRzOiBMYXRMbmdCb3VuZHM7XG4gIHByaXZhdGUgX29wdGlvbnM6IFBhdGhPcHRpb25zO1xuXG4gIGNyZWF0ZUxheWVyKCkge1xuICAgIGlmICh0aGlzLm1hcFJlZiAmJiB0aGlzLl9ib3VuZHMpIHtcbiAgICAgIHRoaXMubGF5ZXJSZWYgPSByZWN0YW5nbGUodGhpcy5fYm91bmRzLCB7XG4gICAgICAgIC4uLnRoaXMuX29wdGlvbnNcbiAgICAgIH0pO1xuICAgICAgdGhpcy5tYXBSZWYuYWRkTGF5ZXIodGhpcy5sYXllclJlZik7XG4gICAgICB0aGlzLmluaXRIYW5kbGVycygpO1xuICAgIH1cbiAgfVxuXG4gIGFkZFRvKG1hcDogTWFwIHwgTGF5ZXJHcm91cCk6IHZvaWQge1xuICAgIHN1cGVyLmFkZFRvKG1hcCk7XG4gICAgaWYgKCF0aGlzLmxheWVyUmVmKSB7XG4gICAgICB0aGlzLmNyZWF0ZUxheWVyKCk7XG4gICAgfVxuICB9XG59XG4iXX0=